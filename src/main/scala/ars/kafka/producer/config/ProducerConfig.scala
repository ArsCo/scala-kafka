/*
 * Copyright 2018 Arsen Ibragimov (ars)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ars.kafka.producer.config

import ars.kafka.consumer.config.{Deserializers, Server}

/** Kafka producer configuration.
  *
  * @author Arsen Ibragimov (ars)
  * @since 0.0.1
  */
trait ProducerConfig {

  /**
    * Gets producer serializers.
    *
    * @return the serializers (non-null)
    */
  def serializers: Serializers

  /**
    * Gets producer `bootstrap.servers` parameter.
    *
    * @return the bootstrap servers (non-blank seq of non-blank elements)
    */
  def bootstrapServers: Seq[Server]

  /**
    * Gets producer `acks` parameter.
    *
    * @return the number of acknowledgments the producer requires the leader to have
    *         received before considering a request complete (non-null option of non-null)
    */
  def asks: Option[ProducerAck]

  /**
    * Gets producer `buffer.memory` parameter.
    *
    * @return the total bytes of memory the producer can use to buffer records waiting
    *         to be sent to the server (non-null option of non-negative number).
    */
  def memoryBuffer: Option[Long]

  /**
    * Gets producer `compression.type` parameter.
    *
    * @return the compression type for all data generated by the producer. (non-null option of non-null).
    */
  def compressionType: Option[CompressionType]

  /**
    * Gets producer `retries` parameter.
    *
    * @return the number of resends. (non-null option of non-negative number).
    */
  def retries: Option[Int]

  /**
    * Gets producer `enable.idempotence` parameter.
    * When set to `true`, the producer will ensure that exactly one copy of each message is written in the stream.
    *
    * @return the idempotance (non-null option)
    */
  def idempotence: Option[Boolean]

  /**
    * Gets all params that has no explicit getter methods as a map of key/value pairs.
    *
    * @return the map containing all params that has no explicit getter methods (non-null)
    */
  def raw: Map[String, Any] = Map()

  /**
    * Gets all params as a map of key/value pairs.
    *
    * @return the map containing all params (non-null)
    */
  def all: Map[String, Any] = {
    toMap(serializers) ++ toMap(bootstrapServers) ++
      asks.map("acks" -> _) ++
      memoryBuffer.map("buffer.memory" -> _) ++
      compressionType.map("compression.type" -> _) ++
      retries.map("retries" -> _) ++
      idempotence.map("enable.idempotence" -> _) ++
      raw
  }

  private def toMap(serializers: Serializers): Map[String, Any] = {
    Map(
      "key.serializer" -> serializers.key,
      "value.serializer" -> serializers.value
    )
  }

  private def toMap(servers: Seq[Server]): Map[String, Any] = { // TODO Dup
    val serversString = servers.map { case Server(h, p) => s"$h:$p" }.mkString(",")
    Map("bootstrap.servers" -> serversString)
  }
}
